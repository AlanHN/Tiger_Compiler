	.text
	.globl tigermain
	.type tigermain, @function
tigermain:
	pushq %rbp
	movq %rsp, %rbp
	subq $32, %rsp
.L35:
	movq %rdi, -8(%rbp)
	movq $16, %rax
	movq %rax, -16(%rbp)
	movq $-24, %rax
	addq %rax, %rbp
	movq %rbp, -32(%rbp)
	movq $0, %rsi
	movq $-16, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rdi
	call initArray
	movq -32(%rbp), %rcx
	movq %rax, (%rcx)
	movq %rbp, %rdi
	call L4


	leave
	ret

	.text
	.globl L4
	.type L4, @function
L4:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
.L37:
	movq %rdi, -8(%rbp)
	movq $-8, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rdi
	call L2
	movq $-8, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rax
	movq $-16, %rcx
	addq %rcx, %rax
	movq (%rax), %rdx
	movq $1, %rax
	subq %rax, %rdx
	movq $0, %rsi
	movq $-8, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rdi
	call L3
	movq $0, %rax
	movq %rax, -16(%rbp)
.L32:
	movq $-16, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rcx
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-16, %rdx
	addq %rdx, %rax
	movq (%rax), %rax
	movq $1, %rdx
	subq %rdx, %rax
	cmp %rax, %rcx
	jle .L33
.L31:
	leaq .L5(%rip), %rdi
	call print
	jmp .L36
.L33:
	movq $-8, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rax
	movq $-24, %rcx
	addq %rcx, %rax
	movq (%rax), %rcx
	movq $-16, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $8, %rsi
	imulq %rsi, %rax
	addq %rax, %rcx
	movq (%rcx), %rdi
	call printi
	leaq .L5(%rip), %rdi
	call print
	movq $-16, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rax
	movq $1, %rcx
	addq %rcx, %rax
	movq %rax, -16(%rbp)
	jmp .L32
.L36:


	leave
	ret

	.text
	.globl L3
	.type L3, @function
L3:
	pushq %rbp
	movq %rsp, %rbp
	subq $24, %rsp
.L39:
	movq %rdi, -8(%rbp)
	movq %rdx, -24(%rbp)
	movq %rsi, -16(%rbp)
	movq -24(%rbp), %rcx
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-24, %rdx
	addq %rdx, %rax
	movq (%rax), %rdi
	movq $8, %r8
	movq %rsi, %rax
	imulq %r8, %rax
	addq %rax, %rdi
	movq (%rdi), %rdi
	movq -24(%rbp), %rax
	cmp %rax, %rsi
	jl .L28
.L29:
	movq $0, %rax
	jmp .L38
.L28:
.L26:
	movq -16(%rbp), %rax
	cmp %rcx, %rax
	jl .L27
.L9:
	movq $-8, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rax
	movq $-24, %rcx
	addq %rcx, %rax
	movq (%rax), %rax
	movq -16(%rbp), %rcx
	movq %rdi, (%rax,%rcx,8)
	movq $1, %rax
	movq -16(%rbp), %rdx
	subq %rax, %rdx
	movq $-8, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rdi
	call L3
	movq -24(%rbp), %rdx
	movq $1, %rax
	movq -16(%rbp), %rsi
	addq %rax, %rsi
	movq $-8, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rdi
	call L3
	jmp .L29
.L27:
.L16:
	movq -16(%rbp), %rax
	cmp %rcx, %rax
	jl .L10
.L11:
	movq $0, %r8
.L12:
	movq $0, %rax
	cmp %rax, %r8
	jne .L17
.L15:
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-24, %rdx
	addq %rdx, %rax
	movq (%rax), %r8
	movq $8, %r9
	movq %rcx, %rax
	imulq %r9, %rax
	addq %rax, %r8
	movq (%r8), %r8
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-24, %rdx
	addq %rdx, %rax
	movq (%rax), %rax
	movq -16(%rbp), %rdx
	movq %r8, (%rax,%rdx,8)
.L24:
	movq -16(%rbp), %rax
	cmp %rcx, %rax
	jl .L18
.L19:
	movq $0, %r8
.L20:
	movq $0, %rax
	cmp %rax, %r8
	jne .L25
.L23:
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-24, %rdx
	addq %rdx, %rax
	movq (%rax), %r8
	movq $8, %r9
	movq -16(%rbp), %rax
	imulq %r9, %rax
	addq %rax, %r8
	movq (%r8), %r8
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-24, %rdx
	addq %rdx, %rax
	movq (%rax), %rax
	movq %r8, (%rax,%rcx,8)
	jmp .L26
.L10:
	movq $1, %r8
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-24, %rdx
	addq %rdx, %rax
	movq (%rax), %r9
	movq $8, %r10
	movq %rcx, %rax
	imulq %r10, %rax
	addq %rax, %r9
	movq (%r9), %rax
	cmp %rax, %rdi
	jle .L13
.L14:
	movq $0, %r8
.L13:
	jmp .L12
.L17:
	movq $1, %rax
	subq %rax, %rcx
	jmp .L16
.L18:
	movq $1, %r8
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-24, %rdx
	addq %rdx, %rax
	movq (%rax), %r9
	movq $8, %r10
	movq -16(%rbp), %rax
	imulq %r10, %rax
	addq %rax, %r9
	movq (%r9), %rax
	cmp %rax, %rdi
	jge .L21
.L22:
	movq $0, %r8
.L21:
	jmp .L20
.L25:
	movq $1, %rdx
	movq -16(%rbp), %rax
	addq %rdx, %rax
	movq %rax, -16(%rbp)
	jmp .L24
.L38:


	leave
	ret

	.text
	.globl L2
	.type L2, @function
L2:
	pushq %rbp
	movq %rsp, %rbp
	subq $16, %rsp
.L41:
	movq %rdi, -8(%rbp)
	movq $0, %rax
	movq %rax, -16(%rbp)
.L7:
	movq $-16, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rcx
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-16, %rdx
	addq %rdx, %rax
	movq (%rax), %rax
	movq $1, %rdx
	subq %rdx, %rax
	cmp %rax, %rcx
	jle .L8
.L6:
	movq $0, %rax
	jmp .L40
.L8:
	movq $-8, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rax
	movq $-16, %rcx
	addq %rcx, %rax
	movq (%rax), %rcx
	movq $-16, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	subq %rax, %rcx
	movq $-8, %rdx
	movq %rbp, %rax
	addq %rdx, %rax
	movq (%rax), %rax
	movq $-24, %rdx
	addq %rdx, %rax
	movq (%rax), %rdx
	movq $-16, %rsi
	movq %rbp, %rax
	addq %rsi, %rax
	movq (%rax), %rax
	movq %rcx, (%rdx,%rax,8)
	movq $-8, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rdi
	call L1
	movq $-16, %rcx
	movq %rbp, %rax
	addq %rcx, %rax
	movq (%rax), %rax
	movq $1, %rcx
	addq %rcx, %rax
	movq %rax, -16(%rbp)
	jmp .L7
.L40:


	leave
	ret

	.text
	.globl L1
	.type L1, @function
L1:
	pushq %rbp
	movq %rsp, %rbp
	subq $8, %rsp
.L43:
	movq %rdi, -8(%rbp)
	leaq .L5(%rip), %rdi
	call print


	leave
	ret

	.section .rodata
.L5:
	.int 0
	.string ""
