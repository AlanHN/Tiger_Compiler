Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: opexp
    3    | ifexp
    4    | whileexp
    5    | forexp
    6    | lvalue ASSIGN exp
    7    | BREAK
    8    | LET decs IN expseq END
    9    | ID LBRACK exp RBRACK OF exp
   10    | ID ASSIGN exp

   11 opexp: NIL
   12      | LPAREN expseq RPAREN
   13      | ID LPAREN RPAREN
   14      | ID LPAREN actuals RPAREN
   15      | ID LBRACE rec RBRACE
   16      | lvalue
   17      | INT
   18      | STRING
   19      | MINUS opexp
   20      | opexp PLUS opexp
   21      | opexp MINUS opexp
   22      | opexp TIMES opexp
   23      | opexp DIVIDE opexp
   24      | opexp EQ opexp
   25      | opexp NEQ opexp
   26      | opexp LT opexp
   27      | opexp LE opexp
   28      | opexp GT opexp
   29      | opexp GE opexp
   30      | opexp AND opexp
   31      | opexp OR opexp

   32 ifexp: IF exp THEN exp
   33      | IF exp THEN exp ELSE exp

   34 whileexp: WHILE exp DO exp

   35 forexp: FOR ID ASSIGN exp TO exp DO exp

   36 expseq: sequencing

   37 actuals: nonemptyactuals

   38 nonemptyactuals: exp
   39                | exp COMMA nonemptyactuals

   40 sequencing: exp
   41           | sequencing_exps

   42 sequencing_exps: exp SEMICOLON exp
   43                | exp SEMICOLON sequencing_exps
   44                | exp SEMICOLON LPAREN RPAREN

   45 lvalue: ID
   46       | lvalue DOT ID
   47       | lvalue LBRACK exp RBRACK
   48       | ID LBRACK exp RBRACK

   49 decs: %empty
   50     | decs_nonempty

   51 decs_nonempty: decs_nonempty_s
   52              | decs_nonempty_s decs_nonempty

   53 decs_nonempty_s: vardec
   54                | tydec
   55                | fundec

   56 vardec: VAR ID ASSIGN exp
   57       | VAR ID COLON ID ASSIGN exp
   58       | VAR ID ASSIGN LPAREN RPAREN

   59 rec: %empty
   60    | rec_nonempty

   61 rec_nonempty: rec_one
   62             | rec_one COMMA rec_nonempty

   63 rec_one: ID EQ exp

   64 tydec: tydec_one tydec
   65      | tydec_one

   66 tydec_one: TYPE ID EQ ty

   67 tyfields: %empty
   68         | tyfields_nonempty

   69 tyfields_nonempty: ID COLON ID
   70                  | ID COLON ID COMMA tyfields_nonempty

   71 ty: ID
   72   | LBRACE tyfields RBRACE
   73   | ARRAY OF ID

   74 fundec: fundec_one fundec
   75       | fundec_one

   76 fundec_one: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   77           | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <sval> (258) 9 10 13 14 15 35 45 46 48 56 57 58 63 66 69 70 71 73 76 77
    STRING <sval> (259) 18
    INT <ival> (260) 17
    COMMA (261) 39 62 70
    COLON (262) 57 69 70 77
    SEMICOLON (263) 42 43 44
    LPAREN (264) 12 13 14 44 58 76 77
    RPAREN (265) 12 13 14 44 58 76 77
    LBRACK (266) 9 47 48
    RBRACK (267) 9 47 48
    LBRACE (268) 15 72
    RBRACE (269) 15 72
    DOT (270) 46
    PLUS (271) 20
    MINUS (272) 19 21
    TIMES (273) 22
    DIVIDE (274) 23
    EQ (275) 24 63 66 76 77
    NEQ (276) 25
    LT (277) 26
    LE (278) 27
    GT (279) 28
    GE (280) 29
    AND (281) 30
    OR (282) 31
    ASSIGN (283) 6 10 35 56 57 58
    ARRAY (284) 73
    IF (285) 32 33
    THEN (286) 32 33
    ELSE (287) 33
    WHILE (288) 34
    FOR (289) 35
    TO (290) 35
    DO (291) 34 35
    LET (292) 8
    IN (293) 8
    END (294) 8
    OF (295) 9 73
    BREAK (296) 7
    NIL (297) 11
    FUNCTION (298) 76 77
    VAR (299) 56 57 58
    TYPE (300) 66
    LOW (301)
    UMINUS (302)


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program (49)
        on left: 1
        on right: 0
    exp <exp> (50)
        on left: 2 3 4 5 6 7 8 9 10
        on right: 1 6 9 10 32 33 34 35 38 39 40 42 43 44 47 48 56 57 63 76 77
    opexp <exp> (51)
        on left: 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
        on right: 2 19 20 21 22 23 24 25 26 27 28 29 30 31
    ifexp <exp> (52)
        on left: 32 33
        on right: 3
    whileexp <exp> (53)
        on left: 34
        on right: 4
    forexp <exp> (54)
        on left: 35
        on right: 5
    expseq <exp> (55)
        on left: 36
        on right: 8 12
    actuals <explist> (56)
        on left: 37
        on right: 14
    nonemptyactuals <explist> (57)
        on left: 38 39
        on right: 37 39
    sequencing <explist> (58)
        on left: 40 41
        on right: 36
    sequencing_exps <explist> (59)
        on left: 42 43 44
        on right: 41 43
    lvalue <var> (60)
        on left: 45 46 47 48
        on right: 6 16 46 47
    decs <declist> (61)
        on left: 49 50
        on right: 8
    decs_nonempty <declist> (62)
        on left: 51 52
        on right: 50 52
    decs_nonempty_s <dec> (63)
        on left: 53 54 55
        on right: 51 52
    vardec <dec> (64)
        on left: 56 57 58
        on right: 53
    rec <efieldlist> (65)
        on left: 59 60
        on right: 15
    rec_nonempty <efieldlist> (66)
        on left: 61 62
        on right: 60 62
    rec_one <efield> (67)
        on left: 63
        on right: 61 62
    tydec <nametylist> (68)
        on left: 64 65
        on right: 54 64
    tydec_one <namety> (69)
        on left: 66
        on right: 64 65
    tyfields <fieldlist> (70)
        on left: 67 68
        on right: 72 76 77
    tyfields_nonempty <fieldlist> (71)
        on left: 69 70
        on right: 68 70
    ty <ty> (72)
        on left: 71 72 73
        on right: 66
    fundec <fundeclist> (73)
        on left: 74 75
        on right: 55 74
    fundec_one <fundec> (74)
        on left: 76 77
        on right: 74 75


State 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    program   go to state 12
    exp       go to state 13
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 1

    9 exp: ID . LBRACK exp RBRACK OF exp
   10    | ID . ASSIGN exp
   13 opexp: ID . LPAREN RPAREN
   14      | ID . LPAREN actuals RPAREN
   15      | ID . LBRACE rec RBRACE
   45 lvalue: ID .
   48       | ID . LBRACK exp RBRACK

    LPAREN  shift, and go to state 19
    LBRACK  shift, and go to state 20
    LBRACE  shift, and go to state 21
    ASSIGN  shift, and go to state 22

    $default  reduce using rule 45 (lvalue)


State 2

   18 opexp: STRING .

    $default  reduce using rule 18 (opexp)


State 3

   17 opexp: INT .

    $default  reduce using rule 17 (opexp)


State 4

   12 opexp: LPAREN . expseq RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp              go to state 23
    opexp            go to state 14
    ifexp            go to state 15
    whileexp         go to state 16
    forexp           go to state 17
    expseq           go to state 24
    sequencing       go to state 25
    sequencing_exps  go to state 26
    lvalue           go to state 18


State 5

   19 opexp: MINUS . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 28
    lvalue  go to state 29


State 6

   32 ifexp: IF . exp THEN exp
   33      | IF . exp THEN exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 30
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 7

   34 whileexp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 31
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 8

   35 forexp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 32


State 9

    8 exp: LET . decs IN expseq END

    FUNCTION  shift, and go to state 33
    VAR       shift, and go to state 34
    TYPE      shift, and go to state 35

    $default  reduce using rule 49 (decs)

    decs             go to state 36
    decs_nonempty    go to state 37
    decs_nonempty_s  go to state 38
    vardec           go to state 39
    tydec            go to state 40
    tydec_one        go to state 41
    fundec           go to state 42
    fundec_one       go to state 43


State 10

    7 exp: BREAK .

    $default  reduce using rule 7 (exp)


State 11

   11 opexp: NIL .

    $default  reduce using rule 11 (opexp)


State 12

    0 $accept: program . $end

    $end  shift, and go to state 44


State 13

    1 program: exp .

    $default  reduce using rule 1 (program)


State 14

    2 exp: opexp .
   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54
    AND     shift, and go to state 55
    OR      shift, and go to state 56

    $default  reduce using rule 2 (exp)


State 15

    3 exp: ifexp .

    $default  reduce using rule 3 (exp)


State 16

    4 exp: whileexp .

    $default  reduce using rule 4 (exp)


State 17

    5 exp: forexp .

    $default  reduce using rule 5 (exp)


State 18

    6 exp: lvalue . ASSIGN exp
   16 opexp: lvalue .
   46 lvalue: lvalue . DOT ID
   47       | lvalue . LBRACK exp RBRACK

    LBRACK  shift, and go to state 57
    DOT     shift, and go to state 58
    ASSIGN  shift, and go to state 59

    $default  reduce using rule 16 (opexp)


State 19

   13 opexp: ID LPAREN . RPAREN
   14      | ID LPAREN . actuals RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 60
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp              go to state 61
    opexp            go to state 14
    ifexp            go to state 15
    whileexp         go to state 16
    forexp           go to state 17
    actuals          go to state 62
    nonemptyactuals  go to state 63
    lvalue           go to state 18


State 20

    9 exp: ID LBRACK . exp RBRACK OF exp
   48 lvalue: ID LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 64
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 21

   15 opexp: ID LBRACE . rec RBRACE

    ID  shift, and go to state 65

    $default  reduce using rule 59 (rec)

    rec           go to state 66
    rec_nonempty  go to state 67
    rec_one       go to state 68


State 22

   10 exp: ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 69
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 23

   40 sequencing: exp .
   42 sequencing_exps: exp . SEMICOLON exp
   43                | exp . SEMICOLON sequencing_exps
   44                | exp . SEMICOLON LPAREN RPAREN

    SEMICOLON  shift, and go to state 70

    $default  reduce using rule 40 (sequencing)


State 24

   12 opexp: LPAREN expseq . RPAREN

    RPAREN  shift, and go to state 71


State 25

   36 expseq: sequencing .

    $default  reduce using rule 36 (expseq)


State 26

   41 sequencing: sequencing_exps .

    $default  reduce using rule 41 (sequencing)


State 27

   13 opexp: ID . LPAREN RPAREN
   14      | ID . LPAREN actuals RPAREN
   15      | ID . LBRACE rec RBRACE
   45 lvalue: ID .
   48       | ID . LBRACK exp RBRACK

    LPAREN  shift, and go to state 19
    LBRACK  shift, and go to state 72
    LBRACE  shift, and go to state 21

    $default  reduce using rule 45 (lvalue)


State 28

   19 opexp: MINUS opexp .
   20      | opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    $default  reduce using rule 19 (opexp)


State 29

   16 opexp: lvalue .
   46 lvalue: lvalue . DOT ID
   47       | lvalue . LBRACK exp RBRACK

    LBRACK  shift, and go to state 57
    DOT     shift, and go to state 58

    $default  reduce using rule 16 (opexp)


State 30

   32 ifexp: IF exp . THEN exp
   33      | IF exp . THEN exp ELSE exp

    THEN  shift, and go to state 73


State 31

   34 whileexp: WHILE exp . DO exp

    DO  shift, and go to state 74


State 32

   35 forexp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 75


State 33

   76 fundec_one: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   77           | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 76


State 34

   56 vardec: VAR . ID ASSIGN exp
   57       | VAR . ID COLON ID ASSIGN exp
   58       | VAR . ID ASSIGN LPAREN RPAREN

    ID  shift, and go to state 77


State 35

   66 tydec_one: TYPE . ID EQ ty

    ID  shift, and go to state 78


State 36

    8 exp: LET decs . IN expseq END

    IN  shift, and go to state 79


State 37

   50 decs: decs_nonempty .

    $default  reduce using rule 50 (decs)


State 38

   51 decs_nonempty: decs_nonempty_s .
   52              | decs_nonempty_s . decs_nonempty

    FUNCTION  shift, and go to state 33
    VAR       shift, and go to state 34
    TYPE      shift, and go to state 35

    $default  reduce using rule 51 (decs_nonempty)

    decs_nonempty    go to state 80
    decs_nonempty_s  go to state 38
    vardec           go to state 39
    tydec            go to state 40
    tydec_one        go to state 41
    fundec           go to state 42
    fundec_one       go to state 43


State 39

   53 decs_nonempty_s: vardec .

    $default  reduce using rule 53 (decs_nonempty_s)


State 40

   54 decs_nonempty_s: tydec .

    $default  reduce using rule 54 (decs_nonempty_s)


State 41

   64 tydec: tydec_one . tydec
   65      | tydec_one .

    TYPE  shift, and go to state 35

    $default  reduce using rule 65 (tydec)

    tydec      go to state 81
    tydec_one  go to state 41


State 42

   55 decs_nonempty_s: fundec .

    $default  reduce using rule 55 (decs_nonempty_s)


State 43

   74 fundec: fundec_one . fundec
   75       | fundec_one .

    FUNCTION  shift, and go to state 33

    $default  reduce using rule 75 (fundec)

    fundec      go to state 82
    fundec_one  go to state 43


State 44

    0 $accept: program $end .

    $default  accept


State 45

   20 opexp: opexp PLUS . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 83
    lvalue  go to state 29


State 46

   21 opexp: opexp MINUS . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 84
    lvalue  go to state 29


State 47

   22 opexp: opexp TIMES . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 85
    lvalue  go to state 29


State 48

   23 opexp: opexp DIVIDE . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 86
    lvalue  go to state 29


State 49

   24 opexp: opexp EQ . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 87
    lvalue  go to state 29


State 50

   25 opexp: opexp NEQ . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 88
    lvalue  go to state 29


State 51

   26 opexp: opexp LT . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 89
    lvalue  go to state 29


State 52

   27 opexp: opexp LE . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 90
    lvalue  go to state 29


State 53

   28 opexp: opexp GT . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 91
    lvalue  go to state 29


State 54

   29 opexp: opexp GE . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 92
    lvalue  go to state 29


State 55

   30 opexp: opexp AND . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 93
    lvalue  go to state 29


State 56

   31 opexp: opexp OR . opexp

    ID      shift, and go to state 27
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    NIL     shift, and go to state 11

    opexp   go to state 94
    lvalue  go to state 29


State 57

   47 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 95
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 58

   46 lvalue: lvalue DOT . ID

    ID  shift, and go to state 96


State 59

    6 exp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 97
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 60

   13 opexp: ID LPAREN RPAREN .

    $default  reduce using rule 13 (opexp)


State 61

   38 nonemptyactuals: exp .
   39                | exp . COMMA nonemptyactuals

    COMMA  shift, and go to state 98

    $default  reduce using rule 38 (nonemptyactuals)


State 62

   14 opexp: ID LPAREN actuals . RPAREN

    RPAREN  shift, and go to state 99


State 63

   37 actuals: nonemptyactuals .

    $default  reduce using rule 37 (actuals)


State 64

    9 exp: ID LBRACK exp . RBRACK OF exp
   48 lvalue: ID LBRACK exp . RBRACK

    RBRACK  shift, and go to state 100


State 65

   63 rec_one: ID . EQ exp

    EQ  shift, and go to state 101


State 66

   15 opexp: ID LBRACE rec . RBRACE

    RBRACE  shift, and go to state 102


State 67

   60 rec: rec_nonempty .

    $default  reduce using rule 60 (rec)


State 68

   61 rec_nonempty: rec_one .
   62             | rec_one . COMMA rec_nonempty

    COMMA  shift, and go to state 103

    $default  reduce using rule 61 (rec_nonempty)


State 69

   10 exp: ID ASSIGN exp .

    $default  reduce using rule 10 (exp)


State 70

   42 sequencing_exps: exp SEMICOLON . exp
   43                | exp SEMICOLON . sequencing_exps
   44                | exp SEMICOLON . LPAREN RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 104
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp              go to state 105
    opexp            go to state 14
    ifexp            go to state 15
    whileexp         go to state 16
    forexp           go to state 17
    sequencing_exps  go to state 106
    lvalue           go to state 18


State 71

   12 opexp: LPAREN expseq RPAREN .

    $default  reduce using rule 12 (opexp)


State 72

   48 lvalue: ID LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 107
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 73

   32 ifexp: IF exp THEN . exp
   33      | IF exp THEN . exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 108
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 74

   34 whileexp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 109
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 75

   35 forexp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 110
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 76

   76 fundec_one: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   77           | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 111


State 77

   56 vardec: VAR ID . ASSIGN exp
   57       | VAR ID . COLON ID ASSIGN exp
   58       | VAR ID . ASSIGN LPAREN RPAREN

    COLON   shift, and go to state 112
    ASSIGN  shift, and go to state 113


State 78

   66 tydec_one: TYPE ID . EQ ty

    EQ  shift, and go to state 114


State 79

    8 exp: LET decs IN . expseq END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp              go to state 23
    opexp            go to state 14
    ifexp            go to state 15
    whileexp         go to state 16
    forexp           go to state 17
    expseq           go to state 115
    sequencing       go to state 25
    sequencing_exps  go to state 26
    lvalue           go to state 18


State 80

   52 decs_nonempty: decs_nonempty_s decs_nonempty .

    $default  reduce using rule 52 (decs_nonempty)


State 81

   64 tydec: tydec_one tydec .

    $default  reduce using rule 64 (tydec)


State 82

   74 fundec: fundec_one fundec .

    $default  reduce using rule 74 (fundec)


State 83

   20 opexp: opexp . PLUS opexp
   20      | opexp PLUS opexp .
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    $default  reduce using rule 20 (opexp)


State 84

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   21      | opexp MINUS opexp .
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    $default  reduce using rule 21 (opexp)


State 85

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   22      | opexp TIMES opexp .
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    $default  reduce using rule 22 (opexp)


State 86

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   23      | opexp DIVIDE opexp .
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    $default  reduce using rule 23 (opexp)


State 87

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   24      | opexp EQ opexp .
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 24 (opexp)


State 88

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   25      | opexp NEQ opexp .
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 25 (opexp)


State 89

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   26      | opexp LT opexp .
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 26 (opexp)


State 90

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   27      | opexp LE opexp .
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 27 (opexp)


State 91

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   28      | opexp GT opexp .
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 28 (opexp)


State 92

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   29      | opexp GE opexp .
   30      | opexp . AND opexp
   31      | opexp . OR opexp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 29 (opexp)


State 93

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   30      | opexp AND opexp .
   31      | opexp . OR opexp

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54

    $default  reduce using rule 30 (opexp)


State 94

   20 opexp: opexp . PLUS opexp
   21      | opexp . MINUS opexp
   22      | opexp . TIMES opexp
   23      | opexp . DIVIDE opexp
   24      | opexp . EQ opexp
   25      | opexp . NEQ opexp
   26      | opexp . LT opexp
   27      | opexp . LE opexp
   28      | opexp . GT opexp
   29      | opexp . GE opexp
   30      | opexp . AND opexp
   31      | opexp . OR opexp
   31      | opexp OR opexp .

    PLUS    shift, and go to state 45
    MINUS   shift, and go to state 46
    TIMES   shift, and go to state 47
    DIVIDE  shift, and go to state 48
    EQ      shift, and go to state 49
    NEQ     shift, and go to state 50
    LT      shift, and go to state 51
    LE      shift, and go to state 52
    GT      shift, and go to state 53
    GE      shift, and go to state 54

    $default  reduce using rule 31 (opexp)


State 95

   47 lvalue: lvalue LBRACK exp . RBRACK

    RBRACK  shift, and go to state 116


State 96

   46 lvalue: lvalue DOT ID .

    $default  reduce using rule 46 (lvalue)


State 97

    6 exp: lvalue ASSIGN exp .

    $default  reduce using rule 6 (exp)


State 98

   39 nonemptyactuals: exp COMMA . nonemptyactuals

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp              go to state 61
    opexp            go to state 14
    ifexp            go to state 15
    whileexp         go to state 16
    forexp           go to state 17
    nonemptyactuals  go to state 117
    lvalue           go to state 18


State 99

   14 opexp: ID LPAREN actuals RPAREN .

    $default  reduce using rule 14 (opexp)


State 100

    9 exp: ID LBRACK exp RBRACK . OF exp
   48 lvalue: ID LBRACK exp RBRACK .

    OF  shift, and go to state 118

    $default  reduce using rule 48 (lvalue)


State 101

   63 rec_one: ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 119
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 102

   15 opexp: ID LBRACE rec RBRACE .

    $default  reduce using rule 15 (opexp)


State 103

   62 rec_nonempty: rec_one COMMA . rec_nonempty

    ID  shift, and go to state 65

    rec_nonempty  go to state 120
    rec_one       go to state 68


State 104

   12 opexp: LPAREN . expseq RPAREN
   44 sequencing_exps: exp SEMICOLON LPAREN . RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 121
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp              go to state 23
    opexp            go to state 14
    ifexp            go to state 15
    whileexp         go to state 16
    forexp           go to state 17
    expseq           go to state 24
    sequencing       go to state 25
    sequencing_exps  go to state 26
    lvalue           go to state 18


State 105

   42 sequencing_exps: exp . SEMICOLON exp
   42                | exp SEMICOLON exp .
   43                | exp . SEMICOLON sequencing_exps
   44                | exp . SEMICOLON LPAREN RPAREN

    SEMICOLON  shift, and go to state 70

    $default  reduce using rule 42 (sequencing_exps)


State 106

   43 sequencing_exps: exp SEMICOLON sequencing_exps .

    $default  reduce using rule 43 (sequencing_exps)


State 107

   48 lvalue: ID LBRACK exp . RBRACK

    RBRACK  shift, and go to state 122


State 108

   32 ifexp: IF exp THEN exp .
   33      | IF exp THEN exp . ELSE exp

    ELSE  shift, and go to state 123

    $default  reduce using rule 32 (ifexp)


State 109

   34 whileexp: WHILE exp DO exp .

    $default  reduce using rule 34 (whileexp)


State 110

   35 forexp: FOR ID ASSIGN exp . TO exp DO exp

    TO  shift, and go to state 124


State 111

   76 fundec_one: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   77           | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 125

    $default  reduce using rule 67 (tyfields)

    tyfields           go to state 126
    tyfields_nonempty  go to state 127


State 112

   57 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 128


State 113

   56 vardec: VAR ID ASSIGN . exp
   58       | VAR ID ASSIGN . LPAREN RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 129
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 130
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 114

   66 tydec_one: TYPE ID EQ . ty

    ID      shift, and go to state 131
    LBRACE  shift, and go to state 132
    ARRAY   shift, and go to state 133

    ty  go to state 134


State 115

    8 exp: LET decs IN expseq . END

    END  shift, and go to state 135


State 116

   47 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 47 (lvalue)


State 117

   39 nonemptyactuals: exp COMMA nonemptyactuals .

    $default  reduce using rule 39 (nonemptyactuals)


State 118

    9 exp: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 136
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 119

   63 rec_one: ID EQ exp .

    $default  reduce using rule 63 (rec_one)


State 120

   62 rec_nonempty: rec_one COMMA rec_nonempty .

    $default  reduce using rule 62 (rec_nonempty)


State 121

   44 sequencing_exps: exp SEMICOLON LPAREN RPAREN .

    $default  reduce using rule 44 (sequencing_exps)


State 122

   48 lvalue: ID LBRACK exp RBRACK .

    $default  reduce using rule 48 (lvalue)


State 123

   33 ifexp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 137
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 124

   35 forexp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 138
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 125

   69 tyfields_nonempty: ID . COLON ID
   70                  | ID . COLON ID COMMA tyfields_nonempty

    COLON  shift, and go to state 139


State 126

   76 fundec_one: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   77           | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 140


State 127

   68 tyfields: tyfields_nonempty .

    $default  reduce using rule 68 (tyfields)


State 128

   57 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 141


State 129

   12 opexp: LPAREN . expseq RPAREN
   58 vardec: VAR ID ASSIGN LPAREN . RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 142
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp              go to state 23
    opexp            go to state 14
    ifexp            go to state 15
    whileexp         go to state 16
    forexp           go to state 17
    expseq           go to state 24
    sequencing       go to state 25
    sequencing_exps  go to state 26
    lvalue           go to state 18


State 130

   56 vardec: VAR ID ASSIGN exp .

    $default  reduce using rule 56 (vardec)


State 131

   71 ty: ID .

    $default  reduce using rule 71 (ty)


State 132

   72 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 125

    $default  reduce using rule 67 (tyfields)

    tyfields           go to state 143
    tyfields_nonempty  go to state 127


State 133

   73 ty: ARRAY . OF ID

    OF  shift, and go to state 144


State 134

   66 tydec_one: TYPE ID EQ ty .

    $default  reduce using rule 66 (tydec_one)


State 135

    8 exp: LET decs IN expseq END .

    $default  reduce using rule 8 (exp)


State 136

    9 exp: ID LBRACK exp RBRACK OF exp .

    $default  reduce using rule 9 (exp)


State 137

   33 ifexp: IF exp THEN exp ELSE exp .

    $default  reduce using rule 33 (ifexp)


State 138

   35 forexp: FOR ID ASSIGN exp TO exp . DO exp

    DO  shift, and go to state 145


State 139

   69 tyfields_nonempty: ID COLON . ID
   70                  | ID COLON . ID COMMA tyfields_nonempty

    ID  shift, and go to state 146


State 140

   76 fundec_one: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   77           | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 147
    EQ     shift, and go to state 148


State 141

   57 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 149
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 142

   58 vardec: VAR ID ASSIGN LPAREN RPAREN .

    $default  reduce using rule 58 (vardec)


State 143

   72 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 150


State 144

   73 ty: ARRAY OF . ID

    ID  shift, and go to state 151


State 145

   35 forexp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 152
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 146

   69 tyfields_nonempty: ID COLON ID .
   70                  | ID COLON ID . COMMA tyfields_nonempty

    COMMA  shift, and go to state 153

    $default  reduce using rule 69 (tyfields_nonempty)


State 147

   77 fundec_one: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 154


State 148

   76 fundec_one: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 155
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 149

   57 vardec: VAR ID COLON ID ASSIGN exp .

    $default  reduce using rule 57 (vardec)


State 150

   72 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 72 (ty)


State 151

   73 ty: ARRAY OF ID .

    $default  reduce using rule 73 (ty)


State 152

   35 forexp: FOR ID ASSIGN exp TO exp DO exp .

    $default  reduce using rule 35 (forexp)


State 153

   70 tyfields_nonempty: ID COLON ID COMMA . tyfields_nonempty

    ID  shift, and go to state 125

    tyfields_nonempty  go to state 156


State 154

   77 fundec_one: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 157


State 155

   76 fundec_one: FUNCTION ID LPAREN tyfields RPAREN EQ exp .

    $default  reduce using rule 76 (fundec_one)


State 156

   70 tyfields_nonempty: ID COLON ID COMMA tyfields_nonempty .

    $default  reduce using rule 70 (tyfields_nonempty)


State 157

   77 fundec_one: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp       go to state 158
    opexp     go to state 14
    ifexp     go to state 15
    whileexp  go to state 16
    forexp    go to state 17
    lvalue    go to state 18


State 158

   77 fundec_one: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .

    $default  reduce using rule 77 (fundec_one)
